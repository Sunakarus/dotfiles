#! /bin/sh

PANEL_FONT_FAMILY="TerminessPowerline:size=8"
ICON_FONT="FontAwesome:size=10"

#if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	#printf "%s\n" "The panel is already running." >&2
	#exit 1
#fi

# Kill any panel processes older than us, instead of bailing like the example
# does. That caused one too many panel-less boots for me.
 
while [ $(pgrep -cx panel) -gt 1 ] ; do
    pkill -ox -9 panel
done
     
# Kill any remaining trays / xtitle instances so we don't have multiples.
killall -9 xtitle

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc subscribe report > "$PANEL_FIFO" &

sh update_volume.sh & #initial volume set

# title
xtitle -sf 'T%s' > "$PANEL_FIFO" &

# clock
clock -sf 'S%H:%M' > "$PANEL_FIFO" &

# truncate strings that are too long
function truncate_str {
    maxlen=60
    track="$1"

    if [ "${#track}" -ge $maxlen ]
    then
        track="${track:${#track}-$maxlen:$maxlen}"
        track="...$track"
    fi
    echo "$track"
}
#MAXLEN=60
#function current_track {
    #if [ $(pgrep -xo spotify) ]
    #then
        #track=$(python2 ./.config/bspwm/paneldir/spotify.py)
    #fi

    #if [[ -z $track ]]
    #then
        #if [ $(pgrep -x mpd) ]
        #then
            #track=$(mpc current)
            #if [[ -z $track ]]
            #then
                #echo ""
            #fi
        #else
            #echo "MPD off"
        #fi
    #fi

    #if [ ${#track} -ge 1 ]
    #then
        #echo "$track"
    #fi
#}

#function current_track_symbol {
    #if [[ -n $(mpc status | grep paused) ]]
    #then
        #TRACK_SYMBOL="" #paused
    #elif [[ -n $(mpc status | grep playing) ]]
    #then
        #TRACK_SYMBOL="" #playing
    #else
        #TRACK_SYMBOL="" #spotify
    #fi
    #echo "$TRACK_SYMBOL"
#}

# battery
while true;
do
    #BAT_LEVEL=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep "percentage" | sed 's/\s//g' | cut -d: -f2 | sed 's/%//')
    BAT_LEVEL=$(battery | cut -d' ' -f2)

    SYMBOL="" # full battery
    if [ "$BAT_LEVEL" -le 100 ] && [ "$BAT_LEVEL" -ge 90 ];
    then
        SYMBOL="" # full battery
    elif [ "$BAT_LEVEL" -lt 90 ] && [ "$BAT_LEVEL" -ge 75 ];
    then
        SYMBOL="" # 3/4
    elif [ "$BAT_LEVEL" -lt 75 ] && [ "$BAT_LEVEL" -ge 40 ];
    then
        SYMBOL="" # 2/4
    elif [ "$BAT_LEVEL" -lt 40 ] && [ "$BAT_LEVEL" -ge 10 ];
    then
        SYMBOL="" # 1/4
    else
        SYMBOL="" # empty 
    fi

    if [ "$BAT_LEVEL" == 100 ];
    then
        echo "B$SYMBOL $BAT_LEVEL%"
    elif [[ $(battery) == "Charging"* ]]
    then
        echo "B $SYMBOL $BAT_LEVEL%"
    else
        echo "B$SYMBOL $BAT_LEVEL%"
    fi
sleep 1;
done > "$PANEL_FIFO" &

#estimated time
while true;
do
    BAT_LEVEL=$(battery | cut -d' ' -f2)
    ESTIMATED_TIME=$(acpi | cut -d' ' -f5 | cut -d':' -f1-2)
    if [ "$BAT_LEVEL" == 100 ] || [[ ! $ESTIMATED_TIME == *":"* ]];
    then
        echo "E"
    elif [[ $(battery) == "Discharging"* ]]
    then
        echo "E$ESTIMATED_TIME-"
    else
        echo "E$ESTIMATED_TIME+"
    fi
sleep 5;
done > "$PANEL_FIFO" &

##spotify
##UNTESTED - because spotify keeps segfaulting on startup
#while true;
#do
    ## for when spotify is turned off
    #oldspotflag=$spotflag
    #if [ "$oldspotflag" != "$spotflag" ]
    #then
        #echo "M$CURRENT_TRACK"
    #fi
    #spotflag=0

    #if [ $(pgrep -xo spotify) ]
    #then
        #spotflag=1
        #SPOTIFY_TRACK=$(python2 spotify.py)
        #SPOTIFY_TRACK=$(truncate_str $SPOTIFY_TRACK)
        #if [[ ! -z $SPOTIFY_TRACK ]]
        #then
            #echo "M$SPOTIFY_TRACK "
        #else
            #echo "- "
        #fi
    #fi
    #sleep 1;
#done > "$PANEL_FIFO" &

# current mpd track
while true;
do
    ####### NON-SCROLLING VER #######
    if [ -z $(pgrep -x mpd) ]
    then
        echo "MMPD off"
        sleep 5;
    else
        CURRENT_TRACK=$(sh current_track.sh)
        CURRENT_TRACK=$(truncate_str "$CURRENT_TRACK")
        echo "M$CURRENT_TRACK"
        mpc idle;
    fi

    ####### SCROLLING VERSION #######
    #CURRENT_TRACK=$(current_track)
    #if [ "$OLD_TRACK" != "$CURRENT_TRACK" ] || [ "$counter" -eq "0" ] || [ "${#CURRENT_TRACK}" -le "$MAXLEN" ];
    #then
        #counter=$[${#CURRENT_TRACK}-$MAXLEN]
    #else
        #counter=$[$counter-1]
    #fi
    #OLD_TRACK=$CURRENT_TRACK
    ## truncate tracks that are too long
    #if [ $counter -ge 0 ]
    #then
        #CURRENT_TRACK=${CURRENT_TRACK:$counter:$MAXLEN}
    #fi
    #TRACK_SYMBOL=$(current_track_symbol)
    #echo "M $CURRENT_TRACK $TRACK_SYMBOL"
#sleep 1;
done > "$PANEL_FIFO" &


# alsa volume
while true;
do
    if [ $(pgrep -x pavucontrol) ]
    then
        sh update_volume.sh
        sleep 0.2
    else
        sleep 5
    fi
done > $PANEL_FIFO &


# wifi
while true;
do
    WIFI_SSID=$(iw wlp9s0 link | grep 'SSID' | sed 's/SSID: //' | sed 's/\t//')
    #WIFI_SIGNAL=$(iw wlp9s0 link | grep 'signal' | sed 's/signal: //' | sed 's/ dBm//' | sed 's/\t//')
    #WIFI_SIGNAL=$(cat /proc/net/wireless | awk 'NR==3 { print $3}' | sed 's/\.//')
    WIFI_IP=$(ifconfig wlp9s0 | grep "inet " | cut -d' ' -f10)
    if [ -z "$WIFI_SSID" ];
    then
        echo "L  Disconnected "
    elif [ ! -z "$WIFI_IP" ];
    then
        echo "L  $WIFI_SSID " #connected
    else
        echo "L  $WIFI_SSID"
    fi
sleep 1
done > $PANEL_FIFO &

# date
while true;
  do 
      echo "D $(LC_ALL=en_US.UTF-8 date +'%A %d.%m.%Y')"
  sleep 10
done > $PANEL_FIFO &

. panel_colors

UNDERLINE_THICKNESS=1

panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -U "$COLOR_UNDERLINE" -u $UNDERLINE_THICKNESS | sh &

wid=$(xdo id -a "$PANEL_WM_NAME")
tries_left=20
while [ -z "$wid" -a "$tries_left" -gt 0 ] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME")
	tries_left=$((tries_left - 1))
done
[ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
