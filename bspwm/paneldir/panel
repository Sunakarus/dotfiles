#! /bin/sh

PANEL_FONT_FAMILY="TerminessPowerline:size=8"
ICON_FONT="FontAwesome:size=10"
ICON_FONT2="Siji:size=8"

#if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	#printf "%s\n" "The panel is already running." >&2
	#exit 1
#fi

# Kill any panel processes older than us, instead of bailing like the example
# does. That caused one too many panel-less boots for me.
 
while [ $(pgrep -cx panel) -gt 1 ] ; do
    pkill -ox -9 panel
done
     
# Kill any remaining trays / xtitle instances so we don't have multiples.
killall -9 xtitle

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc subscribe report > "$PANEL_FIFO" &

sh update_volume.sh & #initial volume set
set_trash & #set number of items in trash

# title
xtitle -sf 'T%s' > "$PANEL_FIFO" &

# clock
clock -sf 'S%H:%M' > "$PANEL_FIFO" &

# truncate strings that are too long
function truncate_str {
    maxlen=60
    track="$1"

    if [ "${#track}" -ge $maxlen ]
    then
        track="${track:${#track}-$maxlen:$maxlen}"
        track="...$track"
    fi
    echo "$track"
}

# battery
while true;
do
    #BAT_LEVEL=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep "percentage" | sed 's/\s//g' | cut -d: -f2 | sed 's/%//')
    BAT_LEVEL=$(battery | cut -d' ' -f2)

    SYMBOL="" # full battery
    if [ "$BAT_LEVEL" -le 100 ] && [ "$BAT_LEVEL" -ge 90 ];
    then
        SYMBOL="" # full battery
    elif [ "$BAT_LEVEL" -lt 90 ] && [ "$BAT_LEVEL" -ge 75 ];
    then
        SYMBOL="" # 3/4
    elif [ "$BAT_LEVEL" -lt 75 ] && [ "$BAT_LEVEL" -ge 40 ];
    then
        SYMBOL="" # 2/4
    elif [ "$BAT_LEVEL" -lt 40 ] && [ "$BAT_LEVEL" -ge 10 ];
    then
        SYMBOL="" # 1/4
    else
        SYMBOL="" # empty 
    fi

    if [ "$BAT_LEVEL" == 100 ];
    then
        echo "B$SYMBOL $BAT_LEVEL%"
        sleep 5;
    elif [[ $(battery) == "Charging"* ]]
    then
        echo "B $SYMBOL $BAT_LEVEL%"
    else
        echo "B$SYMBOL $BAT_LEVEL%"
    fi
sleep 1;
done > "$PANEL_FIFO" &

# pacman packages that can be upgraded
while true;
do
    pac=$(checkupdates | wc -l)
    #aur=$(cower -u | wc -l)
    pac=$[$pac]
    if [ "$pac" -ge 1 ]
    then
        echo "P%{A:uxterm -hold -e pacaur -Syu & disown:}  $pac %{A}" #full star 
    else
        echo "P  $pac " #empty star 
    fi
sleep 10;
done > "$PANEL_FIFO" &

#estimated time
while true;
do
    BAT_LEVEL=$(battery | cut -d' ' -f2)
    ESTIMATED_TIME=$(acpi | cut -d' ' -f5 | cut -d':' -f1-2)
    if [ "$BAT_LEVEL" == 100 ] || [[ ! $ESTIMATED_TIME == *":"* ]];
    then
        echo "E"
    elif [[ $(battery) == "Discharging"* ]]
    then
        echo "E${ESTIMATED_TIME}"
    else
        echo "E${ESTIMATED_TIME}"
    fi
sleep 5;
done > "$PANEL_FIFO" &

#spotify
while true;
do
    # for when spotify is turned off
    oldspotflag=$spotflag

    if [ $(pgrep -xo spotify) ]
    then
        spotflag=1
    else
        spotflag=0
    fi

    if [ "$oldspotflag" != "$spotflag" ]
    then
        echo "M "
    fi

    if [ $(pgrep -xo spotify) ]
    then
        SPOTIFY_TRACK=$(python2 .config/bspwm/paneldir/spotify.py)
        SPOTIFY_TRACK=$(truncate_str "$SPOTIFY_TRACK")

        if [[ ! -z "$SPOTIFY_TRACK" ]]
        then
            echo "M $SPOTIFY_TRACK "
        else
            echo "M - "
        fi
        sleep 1;
    else
        sleep 5;
    fi
done > "$PANEL_FIFO" &

# current mpd track
while true;
do
    if [ -z "$(pgrep -x mpd)" ]
    then
        echo "MMPD off"
        sleep 5;
    else
        CURRENT_TRACK=$(sh current_track.sh)
        CURRENT_TRACK=$(truncate_str "$CURRENT_TRACK")
        echo "M$CURRENT_TRACK"
        mpc idle;
        if [ "$?" != 0 ];
        then
            sleep 1;
        fi
    fi
done > "$PANEL_FIFO" &

# alsa volume
while true;
do
    if [ $(pgrep -x pavucontrol) ]
    then
        sh update_volume.sh
        sleep 0.1
    else
        sleep 5
    fi
done > $PANEL_FIFO &

# wifi
while true;
do
    WIFI_SSID=$(iw wlp9s0 link | grep 'SSID' | sed 's/SSID: //' | sed 's/\t//')
    WIFI_IP=$(ifconfig wlp9s0 | grep "inet " | cut -d' ' -f10)
    WIFI_SYMBOL=""
    if [ -z "$WIFI_SSID" ];
    then
        echo "LD Disconnected"
    elif [ ! -z "$WIFI_IP" ];
    then
        WIFI_SIGNAL=$(cat /proc/net/wireless | awk 'NR==3 { print $3}' | sed 's/\.//')
        if [ "$WIFI_SIGNAL" -gt 64 ]
        then
            WIFI_SYMBOL="" #wifi high
        elif [ "$WIFI_SIGNAL" -lt 65 ] && [ "$WIFI_SIGNAL" -gt 39 ]
        then
            WIFI_SYMBOL="" #wifi mid
        elif [ "$WIFI_SIGNAL" -lt 40 ]
        then
            WIFI_SYMBOL="" #wifi low
        fi
        echo "LA $WIFI_SSID$WIFI_SYMBOL" #connected 
    else
        echo "LC $WIFI_SSID"
    fi
sleep 1
done > $PANEL_FIFO &

# date
while true;
  do 
      echo "D $(LC_ALL=en_US.UTF-8 date +'%a %d.%m.%Y')"
  sleep 10
done > $PANEL_FIFO &

. panel_colors

UNDERLINE_THICKNESS=1

panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -f "$ICON_FONT2" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -U "$COLOR_UNDERLINE" -u $UNDERLINE_THICKNESS | sh &

wid=$(xdo id -a "$PANEL_WM_NAME")
tries_left=20
while [ -z "$wid" -a "$tries_left" -gt 0 ] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME")
	tries_left=$((tries_left - 1))
done
[ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
